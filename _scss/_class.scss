/// MIXINS
/// this file is a curated list and some creation of support mixins 
/// @AUTHOR @gustavaum


@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}


%col{float:left;}
%col-right{float:right;}

%col,
%col-right{
  @include clearfix();
}

%clear{
  @include clearfix();
}

// Elemento generico delimitador
%wrap{
  margin:auto;
  &:after{
    clear:both;
    content:"";
    display:block;
  }
}

%logo a{
  display:block;
  //@extend .img-replace;
}
%no-scroll{
  //position:fixed;
  overflow:hidden;
  width: 100%;
}

@mixin set-frame-vertical($h, $overflow: false) {
    @if ($overflow) {
        overflow: $overflow;
    }
    @include vp-vertical($h);
}

@mixin frame-vertical($overflow: false) {
    @if ($overflow) {
        overflow: $overflow;
    }
    @include vp-vertical;
}

@mixin vp-vertical($h:100) {
  height: $h+vh;
}

/**
 * Responsive mixin. The media breakpoints are as defined
 * in the twitter bootstrap framework:
 *
 * - phone
 * - tablet-portrait
 * - tablet-landscape-desktop
 * - large-desktop
 *
 * Additional parameters for tagetting retina and non-retina
 * devices
 *
 * - retina
 * - non-retina
 *
 * Moreover, a specific value in px can be passed which is
 * used to generate a max-width media query.
 */
@mixin respond-to($media) {
    /* Landscape phones and down */
    @if $media == phone {
        @media (max-width: 480px) { @content; }
    }
    /* Landscape phone to portrait tablet */
    @else if $media == tablet-portrait {
        @media (max-width: 767px) {@content; }
    }
    /* Portrait tablet to landscape and desktop */
    @else if $media == tablet-landscape-desktop {
        @media (min-width: 768px) and (max-width: 979px) { @content; }
    }
    /* Large desktop */
    @else if $media == large-desktop {
        @media (min-width: 1200px) { @content; }
    }
    // Non-Retina
    @else if $media == non-retina {
        @media screen and (-webkit-max-device-pixel-ratio: 1) { @content; }
    }
    // Retina Only
    @else if $media == retina {
        @media screen and (-webkit-min-device-pixel-ratio: 2) { @content; }
    }
    // Specific max width
    @else {
        @media only screen and (max-width: #{$media}px) { @content; }
    }
}

@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position;                                               // 1

  @each $offset in $offsets {                                        // 3
    $index: index($args, $offset);                                   // 4

    @if $index {                                                     // 5
      @if $index == length($args) {                                  // 6
        #{$offset}: 0;                                               // 7
      }
      @else {                                                        // 8
        $next: nth($args, $index + 1);                               // 9
        @if is-valid-length($next) {                                 // 10
          #{$offset}: $next;                                         // 11
        }
        @else if index($offsets, $next) {                            // 12
          #{$offset}: 0;                                             // 13
        }
        @else {                                                      // 14
          @warn "Invalid value `#{$next}` for offset `#{$offset}`."; // 15
        }
      }
    }
  }
}

// Function checking if $value is a valid length
// ---
// @param [literal] $value: value to test
// ---
// @return [bool]

@function is-valid-length($value) {
  @return (type-of($value) == "number" and not unitless($value))
       or (index(auto initial inherit 0, $value) != false);
}

// Shorthands
// ---

@mixin absolute($args: ()) {
  @include position(absolute, $args);
}

@mixin fixed($args: ()) {
  @include position(fixed, $args);
}

@mixin relative($args: ()) {
  @include position(relative, $args);
}

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin box-shadow($top: 0, $left: 0, $blur: 5px, $size: 5px, $color: #000, $inset: false) {
    @if $inset {
        -webkit-box-shadow:inset $top $left $blur $size $color;
        -moz-box-shadow:inset $top $left $blur $size $color;
        box-shadow:inset $top $left $blur $size $color;
    } @else {
        -webkit-box-shadow: $top $left $blur $size $color;
        -moz-box-shadow: $top $left $blur $size $color;
        box-shadow: $top $left $blur $size $color;
    }
}
@mixin text-shadow($color, $x:1px, $y:1px, $blur:0){
    text-shadow: $x $y $blur $color;
 }


@mixin horizontal-align($pos: relative) {
  position: $pos;
  left: 50%;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
}

@mixin vertical-align($pos: relative) {
  position: $pos;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin abs-mid($pos: relative){
  position:$pos;
  top:50%;
  left:50%;
  -webkit-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
}


@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;
}

@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}


@mixin scale($scale) {
	 @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
	     -o-transform-origin: $origin;
	    -ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
          transform-origin: $origin;
}

@mixin translate3d($translate-x: 0, $translate-y: 0, $translate-z: 0) {
  -webkit-transform: translate3d($translate-x, $translate-y, $translate-z);
  -ms-transform: translate3d($translate-x, $translate-y, $translate-z);
  transform: translate3d($translate-x, $translate-y, $translate-z);
}

@mixin transition($property, $duration, $ms: false) {
	-webkit-transition: $property $duration ease-in-out;
	-moz-transition: $property $duration ease-in-out;
	-o-transition: $property $duration ease-in-out;
	@if ($ms) {
		-ms-transition: $property $duration ease-in-out;
	}
	transition: $property $duration ease-in-out;
}

@mixin animation ($transform: background, $duration: 0.5s, $easing: ease, $delay: 0.1s) {
  -webkit-transition: $transform $duration $easing $delay;
  -moz-transition:    $transform $duration $easing $delay;
  -o-transition:      $transform $duration $easing $delay;
  transition:         $transform $duration $easing $delay;
}

@mixin round-corners( $tl, $tr:$tl, $bl:$tl, $br:$tl ) {

    /*Top left */
       -moz-border-top-left-radius:   $tl; // firefox
    -webkit-border-top-left-radius:   $tl;  // safari/chrome
            border-top-left-radius:   $tl;  // CSS3, works in IE9
    /*Top right */
       -moz-border-top-right-radius:  $tr; // firefox
    -webkit-border-top-right-radius:  $tr;  // safari/chrome
            border-top-right-radius:  $tr;  // CSS3, works in IE9
    /*Bottom left */
    -moz-border-bottom-left-radius:   $bl; // firefox
 -webkit-border-bottom-left-radius:   $bl;  // safari/chrome
         border-bottom-left-radius:   $bl;  // CSS3, works in IE9
    /*Bottom right */
   -moz-border-bottom-right-radius:   $br; // firefox
-webkit-border-bottom-right-radius:   $br;  // safari/chrome
        border-bottom-right-radius:   $br;  // CSS3, works in IE9
}

@mixin opacity($value){
  $IEValue: $value*100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}
@mixin drop-shadow($size, $cor, $opc) {
    &:after{
      position: absolute;
      left: 0;
      content: '';
      width: 100%;
      bottom: -$size;
      height: $size;
      @include linear-gradient( rgba($cor, $opc), transparent);
    }
}


@mixin full-video($z: false){
    display: block;
    min-width: 100%;
    min-height: 100%;
    width: auto;
    height: auto;
    @if (zindex) {
        z-index: $z;
    }
}

@mixin pattern($opval, $img, $zindex) {
  @include opacity($opval);
  background-image: url('../images/'+$img);
  position: absolute;
  right: 0;
  top: 0;
  min-width: 100%;
  min-height: 100%;
  z-index: $zindex;
}

@mixin size($x, $y: $x) {
    width: $x;
    height: $y;
}
@mixin colorize($txt_color, $bg_color) {
    background-color: $bg_color;
    color: $txt_color;
}

@function color($key) {
  @return map-get($colors, $key);
}

@function sm-colors($key) {
  @return map-get($sm-colors, $key);
}

@mixin dashed-title($brd_color, $brd_size:3px, $aln: center) {
    display: table;
    white-space: nowrap;
    text-transform: uppercase;
    text-align: $aln;
    overflow: hidden;
    &:before, &:after{
        border-top: $brd_size solid $brd_color;
        content: '';
        display: table-cell;
        position: relative;
        top: 0.6em;
        width: 45%;
    }
    &:before{right: 1.5%;}
    &:after{left: 1.5%;}
}

%inline-list{
  display:block;
  list-style:none;
  @include clearfix();
  li{
    display:inline-block;
    float:left;
  }
  a{
    display:block;
    //float:left;
  }

}

%raw-element{
    padding: 0;
    margin: 0;
    border: 0;
}
